generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model AdminTb {
//   id        Int      @id @default(autoincrement())
//   nama      String
//   usernama  String   @unique
//   password  String
//   role      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   SekolahTb SekolahTb?
// }

model SekolahTb {
  id        Int      @id @default(autoincrement())
  // adminId   Int      @unique
  userId    Int      @unique
  nama      String?
  npsn      String?
  alamat    String?
  email     String?
  telp      String?
  hp        String?
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserTb UserTb @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KaryawanTb {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  nama         String
  tempatLahir  String
  tanggalLahir DateTime
  alamat       String
  hp           String   @unique
  email        String   @unique
  // usernama     String   @unique
  foto         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // UserTb UserTb?
  UserTb UserTb @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MemberTb {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  nis          Int
  nama         String
  tempatLahir  String
  tanggalLahir DateTime
  alamat       String
  hp           String   @unique
  email        String   @unique
  status       String
  foto         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // UsermemberTb UsermemberTb?
  UserTb       UserTb         @relation(fields: [userId], references: [id], onDelete: Cascade)
  PeminjamanTb PeminjamanTb[]
  UlasanBukuTb UlasanBukuTb[]
  PemesananTb  PemesananTb[]
}

model UserTb {
  id        Int      @id @default(autoincrement())
  // karyawanId Int      @unique
  nama      String
  usernama  String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KaryawanTb KaryawanTb?
  MemberTb   MemberTb?
  SekolahTb  SekolahTb?
  // KaryawanTb KaryawanTb @relation(fields: [karyawanId], references: [id], onDelete: Cascade)
}

model UlasanBukuTb {
  id        Int      @id @default(autoincrement())
  memberId  Int
  bukuId    Int
  rating    Int
  komentar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MemberTb MemberTb @relation(fields: [memberId], references: [id], onDelete: Cascade)
  BukuTb   BukuTb   @relation(fields: [bukuId], references: [id], onDelete: Cascade)
}

model KategoriTb {
  id        Int      @id @default(autoincrement())
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BukuTb BukuTb[]
}

model BukuTb {
  id          Int      @id @default(autoincrement())
  kategoriId  Int
  kodeBuku    String   @unique
  judul       String
  penerbit    String
  tahunTerbit String
  penulis     String
  bahasa      String
  stok        Int
  qty         Int
  deskripsi   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  KategoriTb        KategoriTb          @relation(fields: [kategoriId], references: [id], onDelete: Cascade)
  LetakBukuTb       LetakBukuTb[]
  DetailPeminjaman  DetailPeminjaman[]
  UlasanBukuTb      UlasanBukuTb[]
  DetailPemesananTb DetailPemesananTb[]
}

model LemariTb {
  id        Int      @id @default(autoincrement())
  nama      String
  jumlahRak Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RakTb RakTb[]
}

model RakTb {
  id        Int      @id @default(autoincrement())
  lemariId  Int
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LemariTb    LemariTb      @relation(fields: [lemariId], references: [id], onDelete: Cascade)
  LetakBukuTb LetakBukuTb[]
}

model LetakBukuTb {
  id        Int      @id @default(autoincrement())
  rakId     Int
  bukuId    Int
  qty       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RakTb  RakTb  @relation(fields: [rakId], references: [id], onDelete: Cascade)
  BukuTb BukuTb @relation(fields: [bukuId], references: [id], onDelete: Cascade)
}

model PeminjamanTb {
  id                  Int       @id @default(autoincrement())
  memberId            Int
  tanggalPeminjaman   DateTime
  tanggalPengembalian DateTime?
  batasWaktu          DateTime
  totalItem           Int
  status              String
  denda               Int?
  keterangan          String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  MemberTb          MemberTb           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  DetailPeminjamand DetailPeminjaman[]
}

model DetailPeminjaman {
  id           Int      @id @default(autoincrement())
  peminjamanId Int
  bukuId       Int
  qty          Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  BukuTb       BukuTb       @relation(fields: [bukuId], references: [id], onDelete: Cascade)
  PeminjamanTb PeminjamanTb @relation(fields: [peminjamanId], references: [id], onDelete: Cascade)
}

model PemesananTb {
  id                 Int      @id @default(autoincrement())
  noPesan            String
  memberId           Int
  tanggalPesan       DateTime
  tanggalPengambilan DateTime
  totalItem          Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  MemberTb          MemberTb            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  DetailPemesananTb DetailPemesananTb[]
}

model DetailPemesananTb {
  id          Int      @id @default(autoincrement())
  bukuId      Int
  pemesananId Int
  qty         Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  BukuTb      BukuTb      @relation(fields: [bukuId], references: [id], onDelete: Cascade)
  PemesananTb PemesananTb @relation(fields: [pemesananId], references: [id], onDelete: Cascade)
}

model SlideTb {
  id        Int      @id @default(autoincrement())
  nama      String
  foto      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Berita {
  id        Int      @id @default(autoincrement())
  judul     String
  tanggal   DateTime
  isi       String
  foto      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PengumumanTb {
  id        Int      @id @default(autoincrement())
  judul     String
  tanggal   DateTime
  isi       String
  foto      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SlideSuperTb {
  id        Int      @id @default(autoincrement())
  nama      String
  foto      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BeritaSuperTb {
  id        Int      @id @default(autoincrement())
  judul     String
  tanggal   DateTime
  isi       String
  foto      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PengumumanSuperTb {
  id        Int      @id @default(autoincrement())
  judul     String
  tanggal   DateTime
  isi       String
  foto      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model logloginTb {
//   id         Int      @id @default(autoincrement())
//   karyawanId Int
//   tanggal    DateTime @default(now())

//   KaryawanTb KaryawanTb @relation(fields: [karyawanId], references: [id], onDelete: Cascade)
// }

// model LogkaryawanTb {
//   id         Int      @id @default(autoincrement())
//   karyawanId Int
//   nama       String
//   hp         String
//   status     String
//   tanggal    DateTime @default(now())
//   userId     Int

//   UserTb UserTb @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model LogbarangTb {
//   id         Int      @id @default(autoincrement())
//   barangId   Int
//   kodeBarang String
//   nama       String
//   status     String
//   tanggal    DateTime @default(now())
//   userId     Int

//   UserTb UserTb @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
